{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0\n};\n\nfunction getDiscountedPrice(price, rate) {\n  return (100 - rate) * 0.01 * price;\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      payload.map(discount => {});\n      const discountsObject = {};\n      state.discounts = payload;\n    },\n    UPDATE: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.discounts.forEach(discount => {\n        payload.forEach(food => {\n          const discountedPrice = getDiscountedPrice(food.priceTimesQuantity, discount.discount_rate);\n          const menuObject = {\n            name: food.name,\n            discountedPrice: discountedPrice // 제외된 가격 (discounts : number)\n\n          };\n          if (!discount.discountedMenu) discount.discountedMenu = [menuObject];else discount.discountedMenu.push(menuObject);\n\n          if (!discount.discountedPrices) {\n            discount.discountedPrices = discountedPrice;\n          } else {\n            discount.discountedPrices += discountedPrice;\n          }\n        });\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/discountReducer.ts"],"names":["createSlice","initialState","discounts","totalPrice","getDiscountedPrice","price","rate","discountReducer","name","reducers","STORE","state","payload","map","discount","discountsObject","UPDATE","forEach","food","discountedPrice","priceTimesQuantity","discount_rate","menuObject","discountedMenu","push","discountedPrices"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAsBA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE;AAFc,CAArB;;AAKP,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,IAA3C,EAAiE;AAC/D,SAAO,CAAC,MAAMA,IAAP,IAAe,IAAf,GAAsBD,KAA7B;AACD;;AAED,OAAO,MAAME,eAAe,GAAGP,WAAW,CAAC;AACzCQ,EAAAA,IAAI,EAAE,iBADmC;AAEzCP,EAAAA,YAAY,EAAEA,YAF2B;AAGzCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,WAAoD;AAAA,UAA5C;AAAEC,QAAAA;AAAF,OAA4C;AACzDA,MAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,IAAI,CAEvB,CAFD;AAGA,YAAMC,eAAe,GAAG,EAAxB;AAGAJ,MAAAA,KAAK,CAACT,SAAN,GAAkBU,OAAlB;AACD,KATO;AAURI,IAAAA,MAAM,EAAE,CAACL,KAAD,YAAsD;AAAA,UAA9C;AAAEC,QAAAA;AAAF,OAA8C;AAC5DD,MAAAA,KAAK,CAACT,SAAN,CAAgBe,OAAhB,CAAyBH,QAAD,IAAc;AACpCF,QAAAA,OAAO,CAACK,OAAR,CAAiBC,IAAD,IAAU;AACxB,gBAAMC,eAAe,GAAGf,kBAAkB,CAACc,IAAI,CAACE,kBAAN,EAAyBN,QAAQ,CAACO,aAAlC,CAA1C;AACA,gBAAMC,UAAU,GAAG;AACjBd,YAAAA,IAAI,EAAEU,IAAI,CAACV,IADM;AAEjBW,YAAAA,eAAe,EAAEA,eAFA,CAGjB;;AAHiB,WAAnB;AAMA,cAAG,CAACL,QAAQ,CAACS,cAAb,EAA6BT,QAAQ,CAACS,cAAT,GAA0B,CAACD,UAAD,CAA1B,CAA7B,KACKR,QAAQ,CAACS,cAAT,CAAwBC,IAAxB,CAA6BF,UAA7B;;AACL,cAAI,CAACR,QAAQ,CAACW,gBAAd,EAAgC;AAC9BX,YAAAA,QAAQ,CAACW,gBAAT,GAA4BN,eAA5B;AACD,WAFD,MAEO;AACLL,YAAAA,QAAQ,CAACW,gBAAT,IAA6BN,eAA7B;AACD;AACF,SAfD;AAgBD,OAjBD;AAkBD;AA7BO;AAH+B,CAAD,CAAnC","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { CartData, StoredFoods } from './cartReducer';\n\nexport interface DiscountsData {\n  discounts: Discounts[];\n  totalPrice?: number;\n}\n\nexport interface Discounts {\n  id: string;\n  name: string;\n  discount_rate: number;\n  discountedMenu?: DiscountedMenu[];\n  discountedPrices?: number;\n}\n\nexport interface DiscountedMenu {\n  name: string;\n  discountedPrice: number;\n}\n\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0,\n}\n\nfunction getDiscountedPrice(price: number, rate: number): number {\n  return (100 - rate) * 0.01 * price;\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState as DiscountsData,\n  reducers: {\n    STORE: (state, { payload }: PayloadAction<Discounts[]>) => {\n      payload.map(discount => {\n        \n      })\n      const discountsObject = {\n\n      }\n      state.discounts = payload;\n    },\n    UPDATE: (state, { payload }: PayloadAction<StoredFoods[]>) => {\n      state.discounts.forEach((discount) => {\n        payload.forEach((food) => {\n          const discountedPrice = getDiscountedPrice(food.priceTimesQuantity,discount.discount_rate);\n          const menuObject = {\n            name: food.name,\n            discountedPrice: discountedPrice\n            // 제외된 가격 (discounts : number)\n          }\n          \n          if(!discount.discountedMenu) discount.discountedMenu = [menuObject];\n          else discount.discountedMenu.push(menuObject);\n          if (!discount.discountedPrices) {\n            discount.discountedPrices = discountedPrice;\n          } else {\n            discount.discountedPrices += discountedPrice;\n          }\n        })\n      })\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}