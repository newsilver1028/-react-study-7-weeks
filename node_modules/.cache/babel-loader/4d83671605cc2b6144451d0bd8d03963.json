{"ast":null,"code":"import{useEffect}from\"react\";import{useSelector,useDispatch}from'react-redux';import{cartReducer}from'../Reducers/cartReducer';import{discountReducer}from'../Reducers/discountReducer';import{Text}from'@chakra-ui/react';import{Box}from'@chakra-ui/react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Food(props){var name=props.name,price=props.price;var dispatch=useDispatch();var _useSelector=useSelector(function(store){return store.cartReducer;}),cartData=_useSelector.cartData;var storedFoods=cartData.storedFoods;var onAdd=function onAdd(target){dispatch(cartReducer.actions.ADD(target));dispatch(cartReducer.actions.UPDATE());};var onUpdate=function onUpdate(storedFoods){dispatch(discountReducer.actions.ADD(storedFoods));dispatch(discountReducer.actions.UPDATE(storedFoods));dispatch(discountReducer.actions.COMPUTE_PRICE());};function addCartClickHandler(){var isOverlapped=storedFoods.filter(function(item){return item.name===name;}).length!==0;if(isOverlapped){alert(\"이미 장바구니에 등록된 상품입니다.\");return;}onAdd(name);}useEffect(function(){onUpdate(storedFoods);},[storedFoods]);return/*#__PURE__*/_jsxs(Box,{marginY:\"20px\",cursor:\"pointer\",children:[/*#__PURE__*/_jsx(Text,{id:name,fontSize:\"lg\",fontWeight:\"semibold\",onClick:addCartClickHandler,children:name}),/*#__PURE__*/_jsxs(Text,{id:name+\"price\",fontSize:\"sm\",color:\"darkgray\",children:[\"\\u20A9\",price]})]});}","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Components/Food.tsx"],"names":["useEffect","useSelector","useDispatch","cartReducer","discountReducer","Text","Box","Food","props","name","price","dispatch","store","cartData","storedFoods","onAdd","target","actions","ADD","UPDATE","onUpdate","COMPUTE_PRICE","addCartClickHandler","isOverlapped","filter","item","length","alert"],"mappings":"AAAA,OAAuBA,SAAvB,KAAwC,OAAxC,CAGA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CAEA,OAASC,WAAT,KAA4B,yBAA5B,CAGA,OAASC,eAAT,KAAgC,6BAAhC,CAEA,OAASC,IAAT,KAAqB,kBAArB,CACA,OAASC,GAAT,KAAoB,kBAApB,C,wFAEA,cAAe,SAASC,CAAAA,IAAT,CAAcC,KAAd,CAA8C,CAC3D,GAAOC,CAAAA,IAAP,CAAsBD,KAAtB,CAAOC,IAAP,CAAaC,KAAb,CAAsBF,KAAtB,CAAaE,KAAb,CACA,GAAMC,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CACA,iBAAqBD,WAAW,CAAC,SAACW,KAAD,QAAsBA,CAAAA,KAAK,CAACT,WAA5B,EAAD,CAAhC,CAAQU,QAAR,cAAQA,QAAR,CACA,GAAMC,CAAAA,WAAW,CAAGD,QAAQ,CAACC,WAA7B,CAEA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,MAAD,CAAoB,CAChCL,QAAQ,CAACR,WAAW,CAACc,OAAZ,CAAoBC,GAApB,CAAwBF,MAAxB,CAAD,CAAR,CACAL,QAAQ,CAACR,WAAW,CAACc,OAAZ,CAAoBE,MAApB,EAAD,CAAR,CACD,CAHD,CAKA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACN,WAAD,CAAgC,CAC/CH,QAAQ,CAACP,eAAe,CAACa,OAAhB,CAAwBC,GAAxB,CAA4BJ,WAA5B,CAAD,CAAR,CACAH,QAAQ,CAACP,eAAe,CAACa,OAAhB,CAAwBE,MAAxB,CAA+BL,WAA/B,CAAD,CAAR,CACAH,QAAQ,CAACP,eAAe,CAACa,OAAhB,CAAwBI,aAAxB,EAAD,CAAR,CACD,CAJD,CAMA,QAASC,CAAAA,mBAAT,EAAoC,CAClC,GAAMC,CAAAA,YAAY,CAAGT,WAAW,CAACU,MAAZ,CAAmB,SAACC,IAAD,QAAiBA,CAAAA,IAAI,CAAChB,IAAL,GAAcA,IAA/B,EAAnB,EAAwDiB,MAAxD,GAAmE,CAAxF,CACA,GAAIH,YAAJ,CAAkB,CAChBI,KAAK,CAAC,qBAAD,CAAL,CACA,OACD,CACDZ,KAAK,CAACN,IAAD,CAAL,CACD,CAEDT,SAAS,CAAC,UAAM,CACdoB,QAAQ,CAACN,WAAD,CAAR,CACD,CAFQ,CAEP,CAACA,WAAD,CAFO,CAAT,CAIA,mBACE,MAAC,GAAD,EAAK,OAAO,CAAC,MAAb,CAAoB,MAAM,CAAC,SAA3B,wBACE,KAAC,IAAD,EAAM,EAAE,CAAEL,IAAV,CAAgB,QAAQ,CAAC,IAAzB,CAA8B,UAAU,CAAC,UAAzC,CAAoD,OAAO,CAAEa,mBAA7D,UAAmFb,IAAnF,EADF,cAEE,MAAC,IAAD,EAAM,EAAE,CAAEA,IAAI,CAAC,OAAf,CAAwB,QAAQ,CAAC,IAAjC,CAAsC,KAAK,CAAC,UAA5C,oBAAyDC,KAAzD,GAFF,GADF,CAMD","sourcesContent":["import { ReactElement, useEffect } from \"react\";\nimport { FoodProps } from './Foods';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { cartReducer } from '../Reducers/cartReducer';\nimport { RootState } from '../Reducers';\nimport { Items, StoredFoods } from '../Interface/cartInterface';\nimport { discountReducer } from '../Reducers/discountReducer';\n\nimport { Text } from '@chakra-ui/react';\nimport { Box } from '@chakra-ui/react';\n\nexport default function Food(props: FoodProps): ReactElement {\n  const {name, price} = props;\n  const dispatch = useDispatch();\n  const { cartData } = useSelector((store: RootState) => store.cartReducer);\n  const storedFoods = cartData.storedFoods;\n\n  const onAdd = (target: string) => {\n    dispatch(cartReducer.actions.ADD(target));\n    dispatch(cartReducer.actions.UPDATE());\n  } \n\n  const onUpdate = (storedFoods: StoredFoods[]) => {\n    dispatch(discountReducer.actions.ADD(storedFoods));\n    dispatch(discountReducer.actions.UPDATE(storedFoods));\n    dispatch(discountReducer.actions.COMPUTE_PRICE());\n  }\n\n  function addCartClickHandler(): any {\n    const isOverlapped = storedFoods.filter((item: Items) => item.name === name).length !== 0;\n    if (isOverlapped) {\n      alert(\"이미 장바구니에 등록된 상품입니다.\");\n      return;\n    }\n    onAdd(name);\n  }\n\n  useEffect(() => {\n    onUpdate(storedFoods);\n  },[storedFoods]);\n  \n  return (\n    <Box marginY=\"20px\" cursor=\"pointer\">\n      <Text id={name} fontSize=\"lg\" fontWeight=\"semibold\" onClick={addCartClickHandler}>{name}</Text>\n      <Text id={name+\"price\"} fontSize=\"sm\" color=\"darkgray\">₩{price}</Text>\n    </Box>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}