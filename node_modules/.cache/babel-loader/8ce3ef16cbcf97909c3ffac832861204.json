{"ast":null,"code":"var _jsxFileName = \"/Users/newsilver/Project/react-study-7-weeks/src/Components/Food.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { cartReducer } from '../Reducers/cartReducer';\nimport { discountReducer } from '../Reducers/discountReducer';\nimport { Text } from '@chakra-ui/react';\nimport { AlertDialog, AlertDialogBody, AlertDialogFooter, AlertDialogHeader, AlertDialogContent, AlertDialogOverlay } from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Food(props) {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onClose = () => setIsOpen(false);\n\n  const cancelRef = useRef();\n  const {\n    name,\n    price\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    cartData\n  } = useSelector(store => store.cartReducer);\n  const storedFoods = cartData.storedFoods;\n\n  const onAdd = target => {\n    dispatch(cartReducer.actions.ADD(target));\n    dispatch(cartReducer.actions.UPDATE());\n  };\n\n  const onUpdate = storedFoods => {\n    dispatch(discountReducer.actions.ADD(storedFoods));\n    dispatch(discountReducer.actions.UPDATE(storedFoods));\n  };\n\n  function addCartClickHandler(event) {\n    const isOverlapped = storedFoods.filter(item => item.name === name).length !== 0;\n\n    if (isOverlapped) {\n      // alert(\"이미 장바구니에 등록된 상품입니다.\");\n\n      /*#__PURE__*/\n      _jsxDEV(AlertDialog, {\n        isOpen: isOverlapped,\n        leastDestructiveRef: cancelRef,\n        onClose: onClose,\n        isCentered: true,\n        children: [/*#__PURE__*/_jsxDEV(AlertDialogOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(AlertDialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(AlertDialogHeader, {\n            fontSize: \"lg\",\n            fontWeight: \"semibold\",\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogBody, {\n            children: \"\\uC774\\uBBF8 \\uC7A5\\uBC14\\uAD6C\\uB2C8\\uC5D0 \\uB4F1\\uB85D\\uB41C \\uC0C1\\uD488\\uC785\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AlertDialogFooter, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onClick: onClose,\n              ml: 3,\n              children: \"\\uD655\\uC778\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this);\n\n      return;\n    }\n\n    onAdd(name);\n  }\n\n  useEffect(() => {\n    onUpdate(storedFoods);\n  }, [storedFoods]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      id: name,\n      fontSize: \"lg\",\n      fontWeight: \"semibold\",\n      onClick: addCartClickHandler,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      id: name + \"price\",\n      as: \"sub\",\n      fontSize: \"sm\",\n      color: \"darkgray\",\n      children: [\"\\u20A9\", price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Food, \"7B3VlU72q9drHpHvFA5154K+jkM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Food;\n\nvar _c;\n\n$RefreshReg$(_c, \"Food\");","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Components/Food.tsx"],"names":["useEffect","useRef","useState","useSelector","useDispatch","cartReducer","discountReducer","Text","AlertDialog","AlertDialogBody","AlertDialogFooter","AlertDialogHeader","AlertDialogContent","AlertDialogOverlay","Button","Food","props","isOpen","setIsOpen","onClose","cancelRef","name","price","dispatch","cartData","store","storedFoods","onAdd","target","actions","ADD","UPDATE","onUpdate","addCartClickHandler","event","isOverlapped","filter","item","length"],"mappings":"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","sourcesContent":["import { ReactElement, useEffect, useRef, useState } from \"react\";\nimport { FoodProps } from './Foods';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { cartReducer } from '../Reducers/cartReducer';\nimport { RootState } from '../Reducers';\nimport { Items, StoredFoods } from '../Interface/cartInterface';\nimport { discountReducer } from '../Reducers/discountReducer';\n\nimport { Text } from '@chakra-ui/react';\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport { Button, ButtonGroup } from '@chakra-ui/react';\n\nexport default function Food(props: FoodProps): ReactElement {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const onClose = () => setIsOpen(false);\n  const cancelRef = useRef<undefined>();\n  const {name, price} = props;\n  const dispatch = useDispatch();\n  const { cartData } = useSelector((store: RootState) => store.cartReducer);\n  const storedFoods = cartData.storedFoods;\n\n  const onAdd = (target: string) => {\n    dispatch(cartReducer.actions.ADD(target));\n    dispatch(cartReducer.actions.UPDATE());\n  } \n\n  const onUpdate = (storedFoods: StoredFoods[]) => {\n    dispatch(discountReducer.actions.ADD(storedFoods));\n    dispatch(discountReducer.actions.UPDATE(storedFoods));\n  }\n\n  function addCartClickHandler(event: any): void {\n    const isOverlapped = storedFoods.filter((item: Items) => item.name === name).length !== 0;\n    if (isOverlapped) {\n      // alert(\"이미 장바구니에 등록된 상품입니다.\");\n      <AlertDialog isOpen={isOverlapped} leastDestructiveRef={cancelRef} onClose={onClose} isCentered>\n        <AlertDialogOverlay>\n          </AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"semibold\">{name}</AlertDialogHeader>\n            <AlertDialogBody>이미 장바구니에 등록된 상품입니다.</AlertDialogBody>\n            <AlertDialogFooter>\n              <Button onClick={onClose} ml={3}>확인</Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n      </AlertDialog>\n      return;\n    }\n    onAdd(name);\n  }\n\n  useEffect(() => {\n    onUpdate(storedFoods);\n  },[storedFoods]);\n  \n  return (\n    <div>\n    <Text id={name} fontSize=\"lg\" fontWeight=\"semibold\" onClick={addCartClickHandler}>{name}</Text>\n    <Text id={name+\"price\"} as=\"sub\" fontSize=\"sm\" color=\"darkgray\">₩{price}</Text>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}