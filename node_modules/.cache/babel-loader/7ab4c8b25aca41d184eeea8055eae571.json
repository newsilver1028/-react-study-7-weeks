{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  count: 0,\n  cartData: {\n    storedFoods: [],\n    totalPrice: 0,\n    isOverMinimum: false\n  },\n  totalPrice: 0,\n  isOverMinimum: false\n};\nexport const cartReducer = createSlice({\n  name: 'cartReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.foodData = payload;\n    },\n    UPDATE: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.foodData = payload;\n    },\n    ADD: (state, _ref3) => {\n      var _state$cartData;\n\n      let {\n        payload\n      } = _ref3;\n      const target = state.foodData.items.filter(item => item.name === payload)[0];\n      const targetObject = {\n        name: target.name,\n        quantitiy: 1,\n        price: target.price,\n        priceTimesQuantity: target.price\n      };\n      (_state$cartData = state.cartData) === null || _state$cartData === void 0 ? void 0 : _state$cartData.storedFoods.push(targetObject);\n      state.count++;\n\n      if (state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce((prev, current) => prev + current.priceTimesQuantity, 0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    },\n    DELETE: (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n\n      if (state.cartData !== undefined) {\n        state.cartData.storedFoods = state.cartData.storedFoods.filter(item => item.name !== payload);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    },\n    INCREASE: (state, _ref5) => {\n      var _state$cartData2;\n\n      let {\n        payload\n      } = _ref5;\n      const target = (_state$cartData2 = state.cartData) === null || _state$cartData2 === void 0 ? void 0 : _state$cartData2.storedFoods.filter(item => item.name === payload)[0];\n      target.quantitiy++;\n      target.priceTimesQuantity = target.price * target.quantitiy;\n\n      if (state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce((prev, current) => prev + current.priceTimesQuantity, 0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    },\n    DECREASE: (state, _ref6) => {\n      var _state$cartData3;\n\n      let {\n        payload\n      } = _ref6;\n      const target = (_state$cartData3 = state.cartData) === null || _state$cartData3 === void 0 ? void 0 : _state$cartData3.storedFoods.filter(item => item.name === payload)[0];\n      if (target.quantitiy === 1) return;\n      target.quantitiy--;\n      target.priceTimesQuantity = target.price * target.quantitiy;\n\n      if (state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce((prev, current) => prev + current.priceTimesQuantity, 0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/cartReducer.ts"],"names":["createSlice","initialState","foodData","minimum_order_price","merchant_name","items","discounts","count","cartData","storedFoods","totalPrice","isOverMinimum","cartReducer","name","reducers","STORE","state","payload","UPDATE","ADD","target","filter","item","targetObject","quantitiy","price","priceTimesQuantity","push","undefined","reduce","prev","current","DELETE","INCREASE","DECREASE"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface Data {\n  foodData: FoodData;\n  count: number;\n  cartData?: CartData;\n}\n\nexport interface FoodData {\n  minimum_order_price: number;\n  merchant_name: string;\n  items: Items[];\n  discounts: Discounts[];\n}\n\nexport interface CartData {\n  storedFoods: StoredFoods[],\n  totalPrice?: number;\n  isOverMinimum?: boolean;\n}\n\nexport interface StoredFoods {\n  name: string;\n  quantitiy: number;\n  price: number;\n  priceTimesQuantity: number;\n}\n\nexport interface Items {\n  id: string;\n  category_id: string;\n  category_name: string;\n  name: string;\n  price: number;\n}\n\nexport interface Discounts {\n  id: string;\n  name: string;\n  discount_rate: number;\n}\n\nexport const initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  count: 0,\n  cartData: {\n    storedFoods: [],\n    totalPrice: 0,\n    isOverMinimum: false\n  },\n  totalPrice: 0,\n  isOverMinimum: false,\n}\n\nexport const cartReducer = createSlice({\n  name: 'cartReducer',\n  initialState: initialState as Data,\n  reducers: {\n    STORE: (state, { payload }: PayloadAction<FoodData>) => {\n      state.foodData = payload;\n    },\n    UPDATE: (state, { payload }: PayloadAction<FoodData>) => {\n      state.foodData = payload;\n    },\n    ADD: (state, { payload }: PayloadAction<string>) => {\n      const target = state.foodData.items.filter((item: Items) => item.name === payload)[0];\n      const targetObject = {\n        name: target.name,\n        quantitiy: 1,\n        price: target.price,\n        priceTimesQuantity: target.price\n      }\n      state.cartData?.storedFoods.push(targetObject);\n      state.count++;\n      if(state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce(\n          (prev, current) => prev + current.priceTimesQuantity,0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    },\n    DELETE: (state, { payload }: PayloadAction<string>) => {\n      if (state.cartData !== undefined) {\n        state.cartData.storedFoods = state.cartData.storedFoods.filter((item:StoredFoods) => item.name !== payload);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice!;\n      }\n    },\n    INCREASE: (state, { payload }: PayloadAction<string>) => {\n      const target = state.cartData?.storedFoods.filter((item:StoredFoods) => item.name === payload)[0] !;\n      target.quantitiy++;\n      target.priceTimesQuantity = target.price * target.quantitiy;\n      if (state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce(\n          (prev, current) => prev + current.priceTimesQuantity,0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    },\n    DECREASE: (state, { payload }: PayloadAction<string>) => {\n      const target = state.cartData?.storedFoods.filter((item:StoredFoods) => item.name === payload)[0] !;\n      if (target.quantitiy === 1) return;\n      target.quantitiy--;\n      target.priceTimesQuantity = target.price * target.quantitiy;\n      if (state.cartData !== undefined) {\n        state.cartData.totalPrice = state.cartData.storedFoods.reduce(\n          (prev, current) => prev + current.priceTimesQuantity,0);\n        state.cartData.isOverMinimum = state.foodData.minimum_order_price <= state.cartData.totalPrice;\n      }\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}