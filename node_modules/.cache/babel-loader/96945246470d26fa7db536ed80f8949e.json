{"ast":null,"code":"var _jsxFileName = \"/Users/newsilver/Project/react-study-7-weeks/src/Components/ui/AlertDialogOverlapped.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AlertDialogOverlapped(props) {\n  _s();\n\n  const {\n    name,\n    isOverlapped\n  } = props;\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onClose = () => setIsOpen(false);\n\n  const cancelRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      status: \"error\",\n      children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AlertTitle, {\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(AlertDescription, {\n        children: \"\\uC774\\uBBF8 \\uC7A5\\uBC14\\uAD6C\\uB2C8\\uC5D0 \\uB4F1\\uB85D\\uB41C \\uC0C1\\uD488\\uC785\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(AlertDialogOverlapped, \"XjhFXNZ8oUt+QxIn6IJ0TdfaW/k=\");\n\n_c = AlertDialogOverlapped;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertDialogOverlapped\");","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Components/ui/AlertDialogOverlapped.tsx"],"names":["useRef","useState","Alert","AlertIcon","AlertTitle","AlertDescription","AlertDialogOverlapped","props","name","isOverlapped","isOpen","setIsOpen","onClose","cancelRef"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;AACA,SACEC,KADF,EAEEC,SAFF,EAGEC,UAHF,EAIEC,gBAJF,QAKO,kBALP;;;AAQA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAA8E;AAAA;;AAC3F,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAuBF,KAA7B;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAU,IAAV,CAApC;;AACA,QAAMW,OAAO,GAAG,MAAMD,SAAS,CAAC,KAAD,CAA/B;;AACA,QAAME,SAAS,GAAGb,MAAM,CAAiB,IAAjB,CAAxB;AAEA,sBACE;AAAA,2BACA,QAAC,KAAD;AAAO,MAAA,MAAM,EAAC,OAAd;AAAA,8BACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAA,kBAAaQ;AAAb;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AASD;;GAfuBF,qB;;KAAAA,qB","sourcesContent":["import { useRef, useState } from \"react\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n} from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\n\nexport default function AlertDialogOverlapped(props: { name: string; isOverlapped: boolean}) {\n  const {name, isOverlapped} = props;\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  const onClose = () => setIsOpen(false);\n  const cancelRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <>\n    <Alert status=\"error\">\n      <AlertIcon />\n      <AlertTitle>{name}</AlertTitle>\n      <AlertDescription>이미 장바구니에 등록된 상품입니다.</AlertDescription>\n    </Alert>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}