{"ast":null,"code":"var _jsxFileName = \"/Users/newsilver/Project/react-study-7-weeks/src/Components/Food.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { cartReducer } from '../Reducers/cartReducer';\nimport { discountReducer } from '../Reducers/discountReducer';\nimport { Text } from '@chakra-ui/react';\nimport AlertDialogOverlapped from \"./AlertDialogOverlapped\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Food(props) {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const onClose = () => setIsOpen(false);\n\n  const cancelRef = useRef(null);\n  const {\n    name,\n    price\n  } = props;\n  const dispatch = useDispatch();\n  const {\n    cartData\n  } = useSelector(store => store.cartReducer);\n  const storedFoods = cartData.storedFoods;\n\n  const onAdd = target => {\n    dispatch(cartReducer.actions.ADD(target));\n    dispatch(cartReducer.actions.UPDATE());\n  };\n\n  const onUpdate = storedFoods => {\n    dispatch(discountReducer.actions.ADD(storedFoods));\n    dispatch(discountReducer.actions.UPDATE(storedFoods));\n  };\n\n  function addCartClickHandler() {\n    const isOverlapped = storedFoods.filter(item => item.name === name).length !== 0;\n\n    if (isOverlapped) {\n      // alert(\"이미 장바구니에 등록된 상품입니다.\");\n      // <AlertDialog isOpen={isOverlapped} leastDestructiveRef={cancelRef} onClose={onClose} isCentered>\n      //   <AlertDialogOverlay>\n      //     <AlertDialogContent>\n      //       <AlertDialogHeader fontSize=\"lg\" fontWeight=\"semibold\">{name}</AlertDialogHeader>\n      //       <AlertDialogBody>이미 장바구니에 등록된 상품입니다.</AlertDialogBody>\n      //       <AlertDialogFooter>\n      //         <Button onClick={onClose} ml={3}>확인</Button>\n      //       </AlertDialogFooter>\n      //     </AlertDialogContent>\n      //     </AlertDialogOverlay>\n      // </AlertDialog>\n      // return;\n\n      /*#__PURE__*/\n      _jsxDEV(AlertDialogOverlapped, {\n        name: name,\n        isOverlapped: isOverlapped\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }, this);\n\n      return;\n    }\n\n    onAdd(name);\n  }\n\n  useEffect(() => {\n    onUpdate(storedFoods);\n  }, [storedFoods]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      id: name,\n      fontSize: \"lg\",\n      fontWeight: \"semibold\",\n      onClick: addCartClickHandler,\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      id: name + \"price\",\n      as: \"sub\",\n      fontSize: \"sm\",\n      color: \"darkgray\",\n      children: [\"\\u20A9\", price]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Food, \"7B3VlU72q9drHpHvFA5154K+jkM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Food;\n\nvar _c;\n\n$RefreshReg$(_c, \"Food\");","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Components/Food.tsx"],"names":["useEffect","useRef","useState","useSelector","useDispatch","cartReducer","discountReducer","Text","AlertDialogOverlapped","Food","props","isOpen","setIsOpen","onClose","cancelRef","name","price","dispatch","cartData","store","storedFoods","onAdd","target","actions","ADD","UPDATE","onUpdate","addCartClickHandler","isOverlapped","filter","item","length"],"mappings":";;;AAAA,SAAuBA,SAAvB,EAAkCC,MAAlC,EAA0CC,QAA1C,QAA0D,OAA1D;AAGA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AAGA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,SAASC,IAAT,QAAqB,kBAArB;AAUA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAA8C;AAAA;;AAC3D,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAU,KAAV,CAApC;;AACA,QAAMW,OAAO,GAAG,MAAMD,SAAS,CAAC,KAAD,CAA/B;;AACA,QAAME,SAAS,GAAGb,MAAM,CAAmB,IAAnB,CAAxB;AACA,QAAM;AAACc,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAgBN,KAAtB;AACA,QAAMO,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAef,WAAW,CAAEgB,KAAD,IAAsBA,KAAK,CAACd,WAA7B,CAAhC;AACA,QAAMe,WAAW,GAAGF,QAAQ,CAACE,WAA7B;;AAEA,QAAMC,KAAK,GAAIC,MAAD,IAAoB;AAChCL,IAAAA,QAAQ,CAACZ,WAAW,CAACkB,OAAZ,CAAoBC,GAApB,CAAwBF,MAAxB,CAAD,CAAR;AACAL,IAAAA,QAAQ,CAACZ,WAAW,CAACkB,OAAZ,CAAoBE,MAApB,EAAD,CAAR;AACD,GAHD;;AAKA,QAAMC,QAAQ,GAAIN,WAAD,IAAgC;AAC/CH,IAAAA,QAAQ,CAACX,eAAe,CAACiB,OAAhB,CAAwBC,GAAxB,CAA4BJ,WAA5B,CAAD,CAAR;AACAH,IAAAA,QAAQ,CAACX,eAAe,CAACiB,OAAhB,CAAwBE,MAAxB,CAA+BL,WAA/B,CAAD,CAAR;AACD,GAHD;;AAKA,WAASO,mBAAT,GAAoC;AAClC,UAAMC,YAAY,GAAGR,WAAW,CAACS,MAAZ,CAAoBC,IAAD,IAAiBA,IAAI,CAACf,IAAL,KAAcA,IAAlD,EAAwDgB,MAAxD,KAAmE,CAAxF;;AACA,QAAIH,YAAJ,EAAkB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA,cAAC,qBAAD;AAAuB,QAAA,IAAI,EAAEb,IAA7B;AAAmC,QAAA,YAAY,EAAEa;AAAjD;AAAA;AAAA;AAAA;AAAA;;AACA;AACD;;AACDP,IAAAA,KAAK,CAACN,IAAD,CAAL;AACD;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,QAAQ,CAACN,WAAD,CAAR;AACD,GAFQ,EAEP,CAACA,WAAD,CAFO,CAAT;AAIA,sBACE;AAAA,4BACA,QAAC,IAAD;AAAM,MAAA,EAAE,EAAEL,IAAV;AAAgB,MAAA,QAAQ,EAAC,IAAzB;AAA8B,MAAA,UAAU,EAAC,UAAzC;AAAoD,MAAA,OAAO,EAAEY,mBAA7D;AAAA,gBAAmFZ;AAAnF;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,IAAD;AAAM,MAAA,EAAE,EAAEA,IAAI,GAAC,OAAf;AAAwB,MAAA,EAAE,EAAC,KAA3B;AAAiC,MAAA,QAAQ,EAAC,IAA1C;AAA+C,MAAA,KAAK,EAAC,UAArD;AAAA,2BAAkEC,KAAlE;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAnDuBP,I;UAKLL,W,EACID,W;;;KANCM,I","sourcesContent":["import { ReactElement, useEffect, useRef, useState } from \"react\";\nimport { FoodProps } from './Foods';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { cartReducer } from '../Reducers/cartReducer';\nimport { RootState } from '../Reducers';\nimport { Items, StoredFoods } from '../Interface/cartInterface';\nimport { discountReducer } from '../Reducers/discountReducer';\n\nimport { Text } from '@chakra-ui/react';\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport { Button, ButtonGroup } from '@chakra-ui/react';\nimport AlertDialogOverlapped from \"./AlertDialogOverlapped\";\n\nexport default function Food(props: FoodProps): ReactElement {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const onClose = () => setIsOpen(false);\n  const cancelRef = useRef<HTMLInputElement>(null);\n  const {name, price} = props;\n  const dispatch = useDispatch();\n  const { cartData } = useSelector((store: RootState) => store.cartReducer);\n  const storedFoods = cartData.storedFoods;\n\n  const onAdd = (target: string) => {\n    dispatch(cartReducer.actions.ADD(target));\n    dispatch(cartReducer.actions.UPDATE());\n  } \n\n  const onUpdate = (storedFoods: StoredFoods[]) => {\n    dispatch(discountReducer.actions.ADD(storedFoods));\n    dispatch(discountReducer.actions.UPDATE(storedFoods));\n  }\n\n  function addCartClickHandler(): any {\n    const isOverlapped = storedFoods.filter((item: Items) => item.name === name).length !== 0;\n    if (isOverlapped) {\n      // alert(\"이미 장바구니에 등록된 상품입니다.\");\n      // <AlertDialog isOpen={isOverlapped} leastDestructiveRef={cancelRef} onClose={onClose} isCentered>\n      //   <AlertDialogOverlay>\n      //     <AlertDialogContent>\n      //       <AlertDialogHeader fontSize=\"lg\" fontWeight=\"semibold\">{name}</AlertDialogHeader>\n      //       <AlertDialogBody>이미 장바구니에 등록된 상품입니다.</AlertDialogBody>\n      //       <AlertDialogFooter>\n      //         <Button onClick={onClose} ml={3}>확인</Button>\n      //       </AlertDialogFooter>\n      //     </AlertDialogContent>\n      //     </AlertDialogOverlay>\n      // </AlertDialog>\n      // return;\n      <AlertDialogOverlapped name={name} isOverlapped={isOverlapped}/>\n      return;\n    }\n    onAdd(name);\n  }\n\n  useEffect(() => {\n    onUpdate(storedFoods);\n  },[storedFoods]);\n  \n  return (\n    <div>\n    <Text id={name} fontSize=\"lg\" fontWeight=\"semibold\" onClick={addCartClickHandler}>{name}</Text>\n    <Text id={name+\"price\"} as=\"sub\" fontSize=\"sm\" color=\"darkgray\">₩{price}</Text>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}