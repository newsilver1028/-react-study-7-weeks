{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchFoodData } from '../Async/fetchFoodData';\nconst initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  sortedFoodsData: [],\n  isLoading: false,\n  error: []\n};\nexport const foodDataReducer = createSlice({\n  name: 'foodDataReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: state => {\n      const foodItemsNameArray = state.foodData.items.map(item => {\n        return item.category_name;\n      });\n      const FOODS_TYPES = Array.from(new Set([...foodItemsNameArray]));\n      state.sortedFoodsData = FOODS_TYPES.map(type => {\n        const FOODS_LIST = state.foodData.items.filter(item => item.category_name === type);\n        return {\n          type: type,\n          foodList: FOODS_LIST\n        };\n      });\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFoodData.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchFoodData.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isLoading = false;\n      state.foodData = payload;\n    }).addCase(fetchFoodData.rejected, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isLoading = false;\n      state.error = payload;\n    });\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/foodDataReducer.ts"],"names":["createSlice","fetchFoodData","initialState","foodData","minimum_order_price","merchant_name","items","discounts","sortedFoodsData","isLoading","error","foodDataReducer","name","reducers","STORE","state","foodItemsNameArray","map","item","category_name","FOODS_TYPES","Array","from","Set","type","FOODS_LIST","filter","foodList","extraReducers","builder","addCase","pending","fulfilled","payload","rejected"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAgBA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CADb;AAERC,IAAAA,aAAa,EAAE,EAFP;AAGRC,IAAAA,KAAK,EAAE,EAHC;AAIRC,IAAAA,SAAS,EAAE;AAJH,GADS;AAOnBC,EAAAA,eAAe,EAAE,EAPE;AAQnBC,EAAAA,SAAS,EAAE,KARQ;AASnBC,EAAAA,KAAK,EAAE;AATY,CAArB;AAYA,OAAO,MAAMC,eAAe,GAAGX,WAAW,CAAC;AACzCY,EAAAA,IAAI,EAAE,iBADmC;AAEzCV,EAAAA,YAAY,EAAEA,YAF2B;AAGzCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW;AAChB,YAAMC,kBAAkB,GAAGD,KAAK,CAACZ,QAAN,CAAeG,KAAf,CAAqBW,GAArB,CAA0BC,IAAD,IAAwB;AAC1E,eAAOA,IAAI,CAACC,aAAZ;AACD,OAF0B,CAA3B;AAGA,YAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGP,kBAAJ,CAAR,CAAX,CAApB;AACAD,MAAAA,KAAK,CAACP,eAAN,GAAwBY,WAAW,CAACH,GAAZ,CAAiBO,IAAD,IAAkC;AACxE,cAAMC,UAAU,GAAGV,KAAK,CAACZ,QAAN,CAAeG,KAAf,CAAqBoB,MAArB,CAA6BR,IAAD,IAAiBA,IAAI,CAACC,aAAL,KAAuBK,IAApE,CAAnB;AACA,eAAO;AACLA,UAAAA,IAAI,EAAEA,IADD;AAELG,UAAAA,QAAQ,EAAEF;AAFL,SAAP;AAID,OANuB,CAAxB;AAOD;AAbO,GAH+B;AAkBzCG,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB7B,aAAa,CAAC8B,OAA9B,EAAwChB,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,KAFD,EAGCqB,OAHD,CAGS7B,aAAa,CAAC+B,SAHvB,EAGkC,CAACjB,KAAD,WAAwB;AAAA,UAAhB;AAAEkB,QAAAA;AAAF,OAAgB;AACxDlB,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACZ,QAAN,GAAiB8B,OAAjB;AACD,KAND,EAOCH,OAPD,CAOS7B,aAAa,CAACiC,QAPvB,EAOiC,CAACnB,KAAD,YAAwB;AAAA,UAAhB;AAAEkB,QAAAA;AAAF,OAAgB;AACvDlB,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcuB,OAAd;AACD,KAVD;AAWD;AA9BwC,CAAD,CAAnC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { fetchFoodData } from '../Async/fetchFoodData';\n\nimport { FoodData, Items } from '../Interface/cartInterface';\n\nexport interface InitialFoodData {\n  foodData: FoodData;\n  sortedFoodsData: FoodsTypeProps[];\n  isLoading: boolean;\n  error?: unknown;\n}\n\nexport interface FoodsTypeProps {\n  type: string;\n  foodList: Items[];\n}\n\nconst initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  sortedFoodsData: [],\n  isLoading: false,\n  error: []\n}\n\nexport const foodDataReducer = createSlice({\n  name: 'foodDataReducer',\n  initialState: initialState as InitialFoodData,\n  reducers: {\n    STORE: (state) => {\n      const foodItemsNameArray = state.foodData.items.map((item: Items) :string=> {\n        return item.category_name;\n      });\n      const FOODS_TYPES = Array.from(new Set([...foodItemsNameArray]));\n      state.sortedFoodsData = FOODS_TYPES.map((type:string) : FoodsTypeProps => {\n        const FOODS_LIST = state.foodData.items.filter((item: Items) => item.category_name === type) \n        return {\n          type: type,\n          foodList: FOODS_LIST\n        }\n      });\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchFoodData.pending, (state) => {\n      state.isLoading = true;\n    })\n    .addCase(fetchFoodData.fulfilled, (state, { payload }) => {\n      state.isLoading = false;\n      state.foodData = payload;\n    })\n    .addCase(fetchFoodData.rejected, (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    })\n  }\n});\n"]},"metadata":{},"sourceType":"module"}