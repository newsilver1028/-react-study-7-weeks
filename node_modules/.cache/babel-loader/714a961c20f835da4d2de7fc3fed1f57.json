{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0\n};\n\nfunction getDiscountedPrice(price, rate) {\n  return Math.floor((100 - rate) * 0.01 * price);\n}\n\nfunction getExcludedPrice(totalPrice, discountedPrice) {\n  return Math.floor(totalPrice - discountedPrice);\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      const data = payload.discounts;\n      state.discounts = data.map(discount => {\n        return { ...discount,\n          discountedMenu: [],\n          discountedPrices: 0\n        };\n      });\n    },\n    UPDATE: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const target = state.storedFoods.filter(food => food.name === payload)[0];\n    },\n    ADD: (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.storedFoods = payload;\n      state.discounts = state.discounts.map(discount => {\n        var _state$storedFoods;\n\n        (_state$storedFoods = state.storedFoods) === null || _state$storedFoods === void 0 ? void 0 : _state$storedFoods.forEach(food => {\n          const discountedPrice = getDiscountedPrice(food.priceTimesQuantity, discount.discount_rate);\n          const excludedPrice = getExcludedPrice(food.priceTimesQuantity, discountedPrice);\n          const menuObject = {\n            name: food.name,\n            discountedPrice: discountedPrice,\n            excludedPrice: excludedPrice\n          };\n          discount.discountedMenu.push(menuObject);\n          discount.discountedPrices += discountedPrice;\n        });\n        return discount;\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/discountReducer.ts"],"names":["createSlice","initialState","discounts","totalPrice","getDiscountedPrice","price","rate","Math","floor","getExcludedPrice","discountedPrice","discountReducer","name","reducers","STORE","state","payload","data","map","discount","discountedMenu","discountedPrices","UPDATE","target","storedFoods","filter","food","ADD","forEach","priceTimesQuantity","discount_rate","excludedPrice","menuObject","push"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAwBA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE;AAFc,CAArB;;AAKP,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,IAA3C,EAAiE;AAC/D,SAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,MAAMF,IAAP,IAAe,IAAf,GAAsBD,KAAjC,CAAP;AACD;;AAED,SAASI,gBAAT,CAA0BN,UAA1B,EAA8CO,eAA9C,EAA+E;AAC7E,SAAOH,IAAI,CAACC,KAAL,CAAWL,UAAU,GAAGO,eAAxB,CAAP;AACD;;AAED,OAAO,MAAMC,eAAe,GAAGX,WAAW,CAAC;AACzCY,EAAAA,IAAI,EAAE,iBADmC;AAEzCX,EAAAA,YAAY,EAAEA,YAF2B;AAGzCY,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,WAAiD;AAAA,UAAzC;AAAEC,QAAAA;AAAF,OAAyC;AACtD,YAAMC,IAAI,GAAGD,OAAO,CAACd,SAArB;AACAa,MAAAA,KAAK,CAACb,SAAN,GAAkBe,IAAI,CAACC,GAAL,CAAUC,QAAD,IAAyB;AAClD,eAAO,EACL,GAAGA,QADE;AAELC,UAAAA,cAAc,EAAE,EAFX;AAGLC,UAAAA,gBAAgB,EAAE;AAHb,SAAP;AAKD,OANiB,CAAlB;AAOD,KAVO;AAWRC,IAAAA,MAAM,EAAE,CAACP,KAAD,YAA+C;AAAA,UAAvC;AAAEC,QAAAA;AAAF,OAAuC;AACrD,YAAMO,MAAM,GAAGR,KAAK,CAACS,WAAN,CAAmBC,MAAnB,CAA2BC,IAAD,IAAUA,IAAI,CAACd,IAAL,KAAcI,OAAlD,EAA2D,CAA3D,CAAf;AAED,KAdO;AAeRW,IAAAA,GAAG,EAAE,CAACZ,KAAD,YAAsD;AAAA,UAA9C;AAAEC,QAAAA;AAAF,OAA8C;AACzDD,MAAAA,KAAK,CAACS,WAAN,GAAoBR,OAApB;AACAD,MAAAA,KAAK,CAACb,SAAN,GAAkBa,KAAK,CAACb,SAAN,CAAgBgB,GAAhB,CAAqBC,QAAD,IAAc;AAAA;;AAClD,8BAAAJ,KAAK,CAACS,WAAN,0EAAmBI,OAAnB,CAA4BF,IAAD,IAAU;AACnC,gBAAMhB,eAAe,GAAGN,kBAAkB,CAACsB,IAAI,CAACG,kBAAN,EAAyBV,QAAQ,CAACW,aAAlC,CAA1C;AACA,gBAAMC,aAAa,GAAGtB,gBAAgB,CAACiB,IAAI,CAACG,kBAAN,EAA0BnB,eAA1B,CAAtC;AACA,gBAAMsB,UAAU,GAAG;AACjBpB,YAAAA,IAAI,EAAEc,IAAI,CAACd,IADM;AAEjBF,YAAAA,eAAe,EAAEA,eAFA;AAGjBqB,YAAAA,aAAa,EAAEA;AAHE,WAAnB;AAKAZ,UAAAA,QAAQ,CAACC,cAAT,CAAyBa,IAAzB,CAA8BD,UAA9B;AACAb,UAAAA,QAAQ,CAACE,gBAAT,IAA8BX,eAA9B;AACD,SAVD;AAWA,eAAOS,QAAP;AACD,OAbiB,CAAlB;AAcD;AA/BO;AAH+B,CAAD,CAAnC","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { FoodData, StoredFoods } from './cartReducer';\n\nexport interface DiscountsData {\n  discounts: Discounts[];\n  totalPrice?: number;\n  storedFoods?: StoredFoods[]\n}\n\nexport interface Discounts {\n  id: string;\n  name: string;\n  discount_rate: number;\n  discountedMenu?: DiscountedMenu[];\n  discountedPrices?: number;\n}\n\nexport interface DiscountedMenu {\n  name: string;\n  discountedPrice: number;\n  excludedPrice: number;\n}\n\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0,\n}\n\nfunction getDiscountedPrice(price: number, rate: number): number {\n  return Math.floor((100 - rate) * 0.01 * price);\n}\n\nfunction getExcludedPrice(totalPrice: number, discountedPrice: number): number {\n  return Math.floor(totalPrice - discountedPrice);\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState as DiscountsData,\n  reducers: {\n    STORE: (state, { payload }: PayloadAction<FoodData>) => {\n      const data = payload.discounts;\n      state.discounts = data.map((discount: Discounts) => {\n        return {\n          ...discount,\n          discountedMenu: [],\n          discountedPrices: 0\n        }\n      })\n    },\n    UPDATE: (state, { payload }: PayloadAction<string>) => {\n      const target = state.storedFoods!.filter((food) => food.name === payload)[0];\n\n    },\n    ADD: (state, { payload }: PayloadAction<StoredFoods[]>) => {\n      state.storedFoods = payload;\n      state.discounts = state.discounts.map((discount) => {\n        state.storedFoods?.forEach((food) => {\n          const discountedPrice = getDiscountedPrice(food.priceTimesQuantity,discount.discount_rate);\n          const excludedPrice = getExcludedPrice(food.priceTimesQuantity, discountedPrice);\n          const menuObject = {\n            name: food.name,\n            discountedPrice: discountedPrice,\n            excludedPrice: excludedPrice\n          }\n          discount.discountedMenu!.push(menuObject);   \n          discount.discountedPrices! += discountedPrice;\n        });\n        return discount;\n      })\n    }\n  },\n});\n"]},"metadata":{},"sourceType":"module"}