{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0\n};\n\nfunction getDiscountedPrice(price, rate) {\n  return (100 - rate) * 0.01 * price;\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.discounts = payload;\n    },\n    UPDATE: (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      const target = state.discounts.filter(discount => discount.name === payload)[0];\n      state.discounts.forEach(discount => {\n        target.storedFoods.forEach(food => {\n          var _discount$discountedM;\n\n          const discountedPrice = getDiscountedPrice(food.price, discount.discount_rate);\n          const menuObject = {\n            name: food.name,\n            priceDividedByQuantitiy: discountedPrice\n          };\n          (_discount$discountedM = discount.discountedMenu) === null || _discount$discountedM === void 0 ? void 0 : _discount$discountedM.push(menuObject);\n\n          if (!discount.discountedPrice) {\n            discount.discountedPrice = discountedPrice;\n          } else {\n            discount.discountedPrice += discountedPrice;\n          }\n        });\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/discountReducer.ts"],"names":["createSlice","initialState","discounts","totalPrice","getDiscountedPrice","price","rate","discountReducer","name","reducers","STORE","state","payload","UPDATE","target","filter","discount","forEach","storedFoods","food","discountedPrice","discount_rate","menuObject","priceDividedByQuantitiy","discountedMenu","push"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAsBA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE;AAFc,CAArB;;AAKP,SAASC,kBAAT,CAA4BC,KAA5B,EAA2CC,IAA3C,EAAiE;AAC/D,SAAO,CAAC,MAAMA,IAAP,IAAe,IAAf,GAAsBD,KAA7B;AACD;;AAED,OAAO,MAAME,eAAe,GAAGP,WAAW,CAAC;AACzCQ,EAAAA,IAAI,EAAE,iBADmC;AAEzCP,EAAAA,YAAY,EAAEA,YAF2B;AAGzCQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,WAAoD;AAAA,UAA5C;AAAEC,QAAAA;AAAF,OAA4C;AACzDD,MAAAA,KAAK,CAACT,SAAN,GAAkBU,OAAlB;AACD,KAHO;AAIRC,IAAAA,MAAM,EAAE,CAACF,KAAD,YAA+C;AAAA,UAAvC;AAAEC,QAAAA;AAAF,OAAuC;AACrD,YAAME,MAAM,GAAGH,KAAK,CAACT,SAAN,CAAgBa,MAAhB,CAAwBC,QAAD,IAAyBA,QAAQ,CAACR,IAAT,KAAkBI,OAAlE,EAA2E,CAA3E,CAAf;AACAD,MAAAA,KAAK,CAACT,SAAN,CAAgBe,OAAhB,CAAyBD,QAAD,IAAc;AACpCF,QAAAA,MAAM,CAACI,WAAP,CAAmBD,OAAnB,CAA4BE,IAAD,IAAU;AAAA;;AACnC,gBAAMC,eAAe,GAAGhB,kBAAkB,CAACe,IAAI,CAACd,KAAN,EAAYW,QAAQ,CAACK,aAArB,CAA1C;AACA,gBAAMC,UAAU,GAAG;AACjBd,YAAAA,IAAI,EAAEW,IAAI,CAACX,IADM;AAEjBe,YAAAA,uBAAuB,EAAEH;AAFR,WAAnB;AAIA,mCAAAJ,QAAQ,CAACQ,cAAT,gFAAyBC,IAAzB,CAA8BH,UAA9B;;AACA,cAAI,CAACN,QAAQ,CAACI,eAAd,EAA+B;AAC7BJ,YAAAA,QAAQ,CAACI,eAAT,GAA2BA,eAA3B;AACD,WAFD,MAEO;AACLJ,YAAAA,QAAQ,CAACI,eAAT,IAA4BA,eAA5B;AACD;AAEF,SAbD;AAeD,OAhBD;AAiBD;AAvBO;AAH+B,CAAD,CAAnC","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { CartData } from './cartReducer';\n\nexport interface DiscountsData {\n  discounts: Discounts[];\n  totalPrice?: number;\n}\n\nexport interface Discounts {\n  id: string;\n  name: string;\n  discount_rate: number;\n  discountedMenu?: DiscountedMenu[];\n  discountedPrice?: number;\n}\n\nexport interface DiscountedMenu {\n  name: string;\n  priceDividedByQuantitiy: number;\n}\n\nexport const initialState = {\n  discounts: [],\n  totalPrice: 0,\n}\n\nfunction getDiscountedPrice(price: number, rate: number): number {\n  return (100 - rate) * 0.01 * price;\n}\n\nexport const discountReducer = createSlice({\n  name: 'discountReducer',\n  initialState: initialState as DiscountsData,\n  reducers: {\n    STORE: (state, { payload }: PayloadAction<Discounts[]>) => {\n      state.discounts = payload;\n    },\n    UPDATE: (state, { payload }: PayloadAction<string>) => {\n      const target = state.discounts.filter((discount: Discounts) => discount.name === payload)[0];\n      state.discounts.forEach((discount) => {\n        target.storedFoods.forEach((food) => {\n          const discountedPrice = getDiscountedPrice(food.price,discount.discount_rate);\n          const menuObject = {\n            name: food.name,\n            priceDividedByQuantitiy: discountedPrice\n          }\n          discount.discountedMenu?.push(menuObject);\n          if (!discount.discountedPrice) {\n            discount.discountedPrice = discountedPrice;\n          } else {\n            discount.discountedPrice += discountedPrice;\n          }\n          \n        })\n\n      })\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}