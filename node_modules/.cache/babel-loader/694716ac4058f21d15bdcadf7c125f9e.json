{"ast":null,"code":"var _jsxFileName = \"/Users/newsilver/Project/react-study-7-weeks/src/Components/ui/AlertDialogOverlapped.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AlertDialogOverlapped(props) {\n  _s();\n\n  const {\n    name,\n    isOverlapped\n  } = props;\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onClose = () => setIsOpen(false);\n\n  const cancelRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Alert, {\n      status: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(AlertDialogOverlapped, \"XjhFXNZ8oUt+QxIn6IJ0TdfaW/k=\");\n\n_c = AlertDialogOverlapped;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlertDialogOverlapped\");","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Components/ui/AlertDialogOverlapped.tsx"],"names":["useRef","useState","AlertDialogOverlapped","props","name","isOverlapped","isOpen","setIsOpen","onClose","cancelRef"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,OAAjC;;;AAWA,eAAe,SAASC,qBAAT,CAA+BC,KAA/B,EAA8E;AAAA;;AAC3F,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAuBF,KAA7B;AACA,QAAM,CAACG,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAU,IAAV,CAApC;;AACA,QAAMO,OAAO,GAAG,MAAMD,SAAS,CAAC,KAAD,CAA/B;;AACA,QAAME,SAAS,GAAGT,MAAM,CAAiB,IAAjB,CAAxB;AAEA,sBACE;AAAA,2BACA,QAAC,KAAD;AAAO,MAAA,MAAM,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AAKD;;GAXuBE,qB;;KAAAA,qB","sourcesContent":["import { useRef, useState } from \"react\";\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from '@chakra-ui/react';\nimport { Button } from '@chakra-ui/react';\n\nexport default function AlertDialogOverlapped(props: { name: string; isOverlapped: boolean}) {\n  const {name, isOverlapped} = props;\n  const [isOpen, setIsOpen] = useState<boolean>(true);\n  const onClose = () => setIsOpen(false);\n  const cancelRef = useRef<HTMLDivElement>(null);\n\n  return (\n    <>\n    <Alert status=''></Alert>\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}