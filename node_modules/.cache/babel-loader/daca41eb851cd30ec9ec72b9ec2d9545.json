{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { fetchFoodData } from '../Async/fetchFoodData';\nconst initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  sortedFoodData: [],\n  isLoading: false,\n  error: []\n};\nexport const foodDataReducer = createSlice({\n  name: 'foodDataReducer',\n  initialState: initialState,\n  reducers: {\n    STORE: (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      const foodItemsNameArray = payload.items.map(item => {\n        return item.category_name;\n      });\n      const FOODS_TYPES = Array.from(new Set([...foodItemsNameArray]));\n      state.sortedFoodData = FOODS_TYPES.map(type => {\n        const FOODS_LIST = payload.items.filter(item => item.category_name === type);\n        return [type, FOODS_LIST];\n      });\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFoodData.pending, state => {\n      state.isLoading = true;\n    }).addCase(fetchFoodData.fulfilled, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isLoading = false;\n      state.foodData = payload;\n    }).addCase(fetchFoodData.rejected, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isLoading = false;\n      state.error = payload;\n    });\n  }\n});","map":{"version":3,"sources":["/Users/newsilver/Project/react-study-7-weeks/src/Reducers/foodDataReducer.ts"],"names":["createSlice","fetchFoodData","initialState","foodData","minimum_order_price","merchant_name","items","discounts","sortedFoodData","isLoading","error","foodDataReducer","name","reducers","STORE","state","payload","foodItemsNameArray","map","item","category_name","FOODS_TYPES","Array","from","Set","type","FOODS_LIST","filter","extraReducers","builder","addCase","pending","fulfilled","rejected"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,aAAT,QAA8B,wBAA9B;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,EAAE,CADb;AAERC,IAAAA,aAAa,EAAE,EAFP;AAGRC,IAAAA,KAAK,EAAE,EAHC;AAIRC,IAAAA,SAAS,EAAE;AAJH,GADS;AAOnBC,EAAAA,cAAc,EAAE,EAPG;AAQnBC,EAAAA,SAAS,EAAE,KARQ;AASnBC,EAAAA,KAAK,EAAE;AATY,CAArB;AAYA,OAAO,MAAMC,eAAe,GAAGX,WAAW,CAAC;AACzCY,EAAAA,IAAI,EAAE,iBADmC;AAEzCV,EAAAA,YAAY,EAAEA,YAF2B;AAGzCW,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAE,CAACC,KAAD,WAAiD;AAAA,UAAzC;AAAEC,QAAAA;AAAF,OAAyC;AACtD,YAAMC,kBAAkB,GAAID,OAAO,CAACV,KAAR,CAAcY,GAAd,CAAmBC,IAAD,IAAwB;AACpE,eAAOA,IAAI,CAACC,aAAZ;AACD,OAF2B,CAA5B;AAGA,YAAMC,WAAW,GAAGC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CAAC,GAAGP,kBAAJ,CAAR,CAAX,CAApB;AACAF,MAAAA,KAAK,CAACP,cAAN,GAAuBa,WAAW,CAACH,GAAZ,CAAiBO,IAAD,IAAmC;AACxE,cAAMC,UAAU,GAAEV,OAAO,CAACV,KAAR,CAAcqB,MAAd,CAAsBR,IAAD,IAAiBA,IAAI,CAACC,aAAL,KAAuBK,IAA7D,CAAlB;AACA,eAAO,CAACA,IAAD,EAAMC,UAAN,CAAP;AACD,OAHsB,CAAvB;AAID;AAVO,GAH+B;AAezCE,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB7B,aAAa,CAAC8B,OAA9B,EAAwChB,KAAD,IAAW;AAChDA,MAAAA,KAAK,CAACN,SAAN,GAAkB,IAAlB;AACD,KAFD,EAGCqB,OAHD,CAGS7B,aAAa,CAAC+B,SAHvB,EAGkC,CAACjB,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACxDD,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACZ,QAAN,GAAiBa,OAAjB;AACD,KAND,EAOCc,OAPD,CAOS7B,aAAa,CAACgC,QAPvB,EAOiC,CAAClB,KAAD,YAAwB;AAAA,UAAhB;AAAEC,QAAAA;AAAF,OAAgB;AACvDD,MAAAA,KAAK,CAACN,SAAN,GAAkB,KAAlB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,OAAd;AACD,KAVD;AAWD;AA3BwC,CAAD,CAAnC","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchFoodData } from '../Async/fetchFoodData';\n\nimport { FoodData, Items } from './cartReducer';\nimport { FoodsTypeProps } from '../Components/FoodsCategories';\n\nexport interface InitialFoodData {\n  foodData: FoodData;\n  sortedFoodData: FoodsTypeProps[];\n  isLoading: boolean;\n  error?: unknown;\n}\n\nconst initialState = {\n  foodData: {\n    minimum_order_price: 0,\n    merchant_name: \"\",\n    items: [],\n    discounts: []\n  },\n  sortedFoodData: [],\n  isLoading: false,\n  error: []\n}\n\nexport const foodDataReducer = createSlice({\n  name: 'foodDataReducer',\n  initialState: initialState as InitialFoodData,\n  reducers: {\n    STORE: (state, { payload }: PayloadAction<FoodData>) => {\n      const foodItemsNameArray  = payload.items.map((item: Items) :string=> {\n        return item.category_name;\n      });\n      const FOODS_TYPES = Array.from(new Set([...foodItemsNameArray]));\n      state.sortedFoodData = FOODS_TYPES.map((type:string) : [string,Items[]]=> {\n        const FOODS_LIST= payload.items.filter((item: Items) => item.category_name === type) \n        return [type,FOODS_LIST];\n      });\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchFoodData.pending, (state) => {\n      state.isLoading = true;\n    })\n    .addCase(fetchFoodData.fulfilled, (state, { payload }) => {\n      state.isLoading = false;\n      state.foodData = payload;\n    })\n    .addCase(fetchFoodData.rejected, (state, { payload }) => {\n      state.isLoading = false;\n      state.error = payload;\n    })\n  }\n});\n"]},"metadata":{},"sourceType":"module"}